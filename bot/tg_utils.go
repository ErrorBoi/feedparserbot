package bot

import (
	"context"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"

	"github.com/ErrorBoi/feedparserbot/ent"
	"github.com/ErrorBoi/feedparserbot/ent/user"
)

var (
	mainKeyboard = map[string]tgbotapi.ReplyKeyboardMarkup{
		"RU": mainKeyboardRu,
		"EN": mainKeyboardEn,
	}
	mainKeyboardRu = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üóû  –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"),
			tgbotapi.NewKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
		),
	)
	mainKeyboardEn = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üóû  Sources"),
			tgbotapi.NewKeyboardButton("‚öôÔ∏è Settings"),
		),
	)

	subsMainKeyboard = map[string]tgbotapi.InlineKeyboardMarkup{
		"RU": subsMainKeyboardRu,
		"EN": subsMainKeyboardEn,
	}
	subsMainKeyboardRu = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "sub"),
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", "unsub"),
		),
	)
	subsMainKeyboardEn = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Subscribe", "sub"),
			tgbotapi.NewInlineKeyboardButtonData("Unsubscribe", "unsub"),
		),
	)

	subscribeKeyboard = map[string]tgbotapi.InlineKeyboardMarkup{
		"RU": subscribeKeyboardRu,
		"EN": subscribeKeyboardEn,
	}
	subscribeKeyboardRu = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "backSubscribeKeyboard"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑–¥–µ–ª—ã VC.ru", "subVCHubs"),
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑–¥–µ–ª—ã RB.ru", "subRBHubs"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("VC.ru", "subVC"),
			tgbotapi.NewInlineKeyboardButtonData("RB.ru", "subRB"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Fontanka.ru", "subFontanka"),
			tgbotapi.NewInlineKeyboardButtonData("Forbes.ru", "subForbes"),
		),
	)
	subscribeKeyboardEn = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô Back", "backSubscribeKeyboard"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("VC.ru hubs", "subVCHubs"),
			tgbotapi.NewInlineKeyboardButtonData("RB.ru hubs", "subRBHubs"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("VC.ru", "subVC"),
			tgbotapi.NewInlineKeyboardButtonData("RB.ru", "subRB"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Fontanka.ru", "subFontanka"),
			tgbotapi.NewInlineKeyboardButtonData("Forbes.ru", "subForbes"),
		),
	)

	subHubKeyboard = map[string]tgbotapi.InlineKeyboardMarkup{
		"RU": subHubKeyboardRu,
		"EN": subHubKeyboardEn,
	}
	subHubKeyboardRu = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "sub"),
		),
	)
	subHubKeyboardEn = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô Back", "sub"),
		),
	)

	settingsMainKeyboard = map[string]tgbotapi.InlineKeyboardMarkup{
		"RU": settingsMainKeyboardRu,
		"EN": settingsMainKeyboardEn,
	}
	settingsMainKeyboardRu = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", "frequency"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞", "urgent"),
			tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", "banned_words"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–ø–∏—Å–∫–∞", "payment"),
			tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞", "language"),
		),
	)
	settingsMainKeyboardEn = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è≥ Edit frequency", "frequency"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Edit urgent words", "urgent"),
			tgbotapi.NewInlineKeyboardButtonData("Edit blacklist", "banned_words"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Subscription", "payment"),
			tgbotapi.NewInlineKeyboardButtonData("Edit language", "language"),
		),
	)

	settingsFreqKeyboard = map[string]tgbotapi.InlineKeyboardMarkup{
		"RU": settingsFreqKeyboardRu,
		"EN": settingsFreqKeyboardEn,
	}
	settingsFreqKeyboardRu = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ", "instant"),
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑ –≤ —á–∞—Å", "1h"),
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑ –≤ 4 —á–∞—Å–∞", "4h"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ", "am"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä", "pm"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—ã–π –ü–Ω", "mon"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—ã–π –í—Ç", "tue"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—É—é –°—Ä", "wed"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—ã–π –ß—Ç", "thu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—É—é –ü—Ç", "fri"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—É—é –°–±", "sat"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥–æ–µ –í—Å", "sun"),
		),
	)
	settingsFreqKeyboardEn = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô Back", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Instant", "instant"),
			tgbotapi.NewInlineKeyboardButtonData("Once in 1 hour", "1h"),
			tgbotapi.NewInlineKeyboardButtonData("Once in 4 hours", "4h"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Every morning", "am"),
			tgbotapi.NewInlineKeyboardButtonData("Every evening", "pm"),
			tgbotapi.NewInlineKeyboardButtonData("Every Mon", "mon"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Every Tue", "tue"),
			tgbotapi.NewInlineKeyboardButtonData("Every Wed", "wed"),
			tgbotapi.NewInlineKeyboardButtonData("Every Thu", "thu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Every Fri", "fri"),
			tgbotapi.NewInlineKeyboardButtonData("Every Sat", "sat"),
			tgbotapi.NewInlineKeyboardButtonData("Every Sun", "sun"),
		),
	)

	settingsBackKeyboard = map[string]tgbotapi.InlineKeyboardMarkup{
		"RU": settingsBackKeyboardRu,
		"EN": settingsBackKeyboardEn,
	}
	settingsBackKeyboardRu = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "settings"),
		),
	)
	settingsBackKeyboardEn = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô Back", "settings"),
		),
	)

	settingsLanguageKeyboard = map[string]tgbotapi.InlineKeyboardMarkup{
		"RU": settingsLanguageKeyboardRu,
		"EN": settingsLanguageKeyboardEn,
	}
	settingsLanguageKeyboardRu = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru_language"),
			tgbotapi.NewInlineKeyboardButtonData("üá¨üáß English", "en_language"),
		),
	)
	settingsLanguageKeyboardEn = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô Back", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru_language"),
			tgbotapi.NewInlineKeyboardButtonData("üá¨üáß English", "en_language"),
		),
	)

	backSubscribeRow = map[string][]tgbotapi.InlineKeyboardButton{
		"RU": backSubscribeRowRu,
		"EN": backSubscribeRowEn,
	}
	backSubscribeRowRu = tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "backSubscribeKeyboard"),
	)
	backSubscribeRowEn = tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô Back", "backSubscribeKeyboard"),
	)
)

func (b *Bot) getSubsText(chatID int64, language string) string {
	text := fmt.Sprintf("<b>‚ÑπÔ∏è %s</b>\n", SubscriptionsMessage[language])

	ctx := context.Background()
	ss, err := b.db.Cli.User.Query().Where(user.TgID(int(chatID))).QuerySources().All(ctx)
	if err != nil {
		b.lg.Errorf("failed querying sources: %v", err)
	}

	if len(ss) == 0 {
		text += NoSubscriptionsMessage[language]
	} else {
		for _, s := range ss {
			text += fmt.Sprintf("* %s\n", s.Title)
		}
	}

	return text
}

func (b *Bot) subUserToSource(cq *tgbotapi.CallbackQuery, sourceURL string, language string) {
	ctx := context.Background()
	err := b.db.StoreUserSource(ctx, cq.From.ID, sourceURL)
	if err != nil {
		b.lg.Errorf("failed storing user source: %v", err)
		switch {
		case ent.IsConstraintError(err):
			b.BotAPI.AnswerCallbackQuery(tgbotapi.NewCallback(cq.ID, AlreadySubscribedMessage[language]))
		}
	} else {
		b.BotAPI.AnswerCallbackQuery(tgbotapi.NewCallback(cq.ID, SubscriptionCompletedMessage[language]))
	}
}

func (b *Bot) getUnsubKeyboard(cq *tgbotapi.CallbackQuery, language string) (*tgbotapi.InlineKeyboardMarkup, error) {
	ctx := context.Background()

	var rows [][]tgbotapi.InlineKeyboardButton
	rows = append(rows, backSubscribeRow[language])

	ss, err := b.db.Cli.User.Query().Where(user.TgID(cq.From.ID)).QuerySources().All(ctx)
	if err != nil {
		return nil, err
	}

	for _, s := range ss {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(s.Title, fmt.Sprintf("unsubSource%d", s.ID)),
		))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	return &keyboard, nil
}
