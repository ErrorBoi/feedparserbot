package bot

import (
	"context"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"

	"github.com/ErrorBoi/feedparserbot/ent"
	"github.com/ErrorBoi/feedparserbot/ent/user"
)

var (
	// Keyboards
	numericKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("1.com", "http://1.com"),
			tgbotapi.NewInlineKeyboardButtonSwitch("2sw", "open 2"),
			tgbotapi.NewInlineKeyboardButtonData("3", "3"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("4", "4"),
			tgbotapi.NewInlineKeyboardButtonData("5", "5"),
			tgbotapi.NewInlineKeyboardButtonData("6", "6"),
		),
	)
	mainKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üóû  –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"),
			tgbotapi.NewKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
		),
	)
	subsMainKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "sub"),
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", "unsub"),
		),
	)
	subscribeKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "backSubscribeKeyboard"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑–¥–µ–ª—ã VC.ru", "subVCHubs"),
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑–¥–µ–ª—ã RB.ru", "subRBHubs"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("VC.ru", "subVC"),
			tgbotapi.NewInlineKeyboardButtonData("RB.ru", "subRB"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Fontanka.ru", "subFontanka"),
			tgbotapi.NewInlineKeyboardButtonData("Forbes.ru", "subForbes"),
		),
	)
	subHubKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "sub"),
		),
	)
	settingsMainKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", "frequency"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞", "urgent"),
			tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", "banned_words"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–ø–∏—Å–∫–∞", "payment"),
			tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞", "language"),
		),
	)
	settingsFreqKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ", "instant"),
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑ –≤ —á–∞—Å", "1h"),
			tgbotapi.NewInlineKeyboardButtonData("–†–∞–∑ –≤ 4 —á–∞—Å–∞", "4h"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ", "am"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä", "pm"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—ã–π –ü–Ω", "mon"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—ã–π –í—Ç", "tue"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—É—é –°—Ä", "wed"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—ã–π –ß—Ç", "thu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—É—é –ü—Ç", "fri"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥—É—é –°–±", "sat"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞–∂–¥–æ–µ –í—Å", "sun"),
		),
	)
	settingsBackKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "settings"),
		),
	)
	settingsLanguageKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru_language"),
			tgbotapi.NewInlineKeyboardButtonData("üá¨üáß English", "en_language"),
		),
	)

	// Messages
	subRBHubsText = "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å–∞–π—Ç–∞ RB.ru, –Ω–∞–π–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª" +
		" –≤ <a href=\"https://rb.ru/list/rss/\">—Å–ø–∏—Å–∫–µ</a> –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add + —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–∑–¥–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: " +
		"/add http://rusbase.com/feeds/tag/bitcoin/\n\n" +
		"<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª—é–±–æ–π —Ä–∞–∑–¥–µ–ª RB.ru –æ—Ç–∫–ª—é—á–∏—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–µ—Å—É—Ä—Å, –∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ " +
		"–æ—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞–∑–¥–µ–ª—ã!"
	subVCHubsText = "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å–∞–π—Ç–∞ VC.ru, –Ω–∞–π–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª" +
		" –≤ <a href=\"https://vc.ru/subs\">—Å–ø–∏—Å–∫–µ</a> –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add + —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–∑–¥–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: " +
		"/add https://vc.ru/marketing"
	settingsText = "<b>üë§ –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏: %s\n–°—Ä–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞: %s\n–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: %s\n–Ø–∑—ã–∫: %s"
)

func (b *Bot) getSubsText(chatID int64) string {
	text := fmt.Sprintf("<b>‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∏</b>\n")

	ctx := context.Background()
	ss, err := b.db.Cli.User.Query().Where(user.TgID(int(chatID))).QuerySources().All(ctx)
	if err != nil {
		b.lg.Errorf("failed querying sources: %v", err)
	}

	if len(ss) == 0 {
		text += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
	} else {
		for _, s := range ss {
			text += fmt.Sprintf("* %s\n", s.Title)
		}
	}

	return text
}

func (b *Bot) subUserToSource(cq *tgbotapi.CallbackQuery, sourceURL string) {
	ctx := context.Background()
	err := b.db.StoreUserSource(ctx, cq.From.ID, sourceURL)
	if err != nil {
		b.lg.Errorf("failed storing user source: %v", err)
		switch {
		case ent.IsConstraintError(err):
			b.BotAPI.AnswerCallbackQuery(tgbotapi.NewCallback(cq.ID, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!"))
		}
	} else {
		b.BotAPI.AnswerCallbackQuery(tgbotapi.NewCallback(cq.ID, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞"))
	}
}

func (b *Bot) getUnsubKeyboard(cq *tgbotapi.CallbackQuery) (*tgbotapi.InlineKeyboardMarkup, error) {
	ctx := context.Background()

	var rows [][]tgbotapi.InlineKeyboardButton
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "backSubscribeKeyboard"),
	))

	ss, err := b.db.Cli.User.Query().Where(user.TgID(cq.From.ID)).QuerySources().All(ctx)
	if err != nil {
		return nil, err
	}

	for _, s := range ss {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(s.Title, fmt.Sprintf("unsubSource%d", s.ID)),
		))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	return &keyboard, nil
}
