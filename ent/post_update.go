// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/ErrorBoi/feedparserbot/ent/post"
	"github.com/ErrorBoi/feedparserbot/ent/predicate"
	"github.com/ErrorBoi/feedparserbot/ent/schema"
	"github.com/ErrorBoi/feedparserbot/ent/source"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks      []Hook
	mutation   *PostMutation
	predicates []predicate.Post
}

// Where adds a new predicate for the builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetTitle sets the title field.
func (pu *PostUpdate) SetTitle(s string) *PostUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetTitleTranslations sets the title_translations field.
func (pu *PostUpdate) SetTitleTranslations(st schema.TitleTranslations) *PostUpdate {
	pu.mutation.SetTitleTranslations(st)
	return pu
}

// SetSubject sets the subject field.
func (pu *PostUpdate) SetSubject(s string) *PostUpdate {
	pu.mutation.SetSubject(s)
	return pu
}

// SetNillableSubject sets the subject field if the given value is not nil.
func (pu *PostUpdate) SetNillableSubject(s *string) *PostUpdate {
	if s != nil {
		pu.SetSubject(*s)
	}
	return pu
}

// ClearSubject clears the value of subject.
func (pu *PostUpdate) ClearSubject() *PostUpdate {
	pu.mutation.ClearSubject()
	return pu
}

// SetSubjectTranslations sets the subject_translations field.
func (pu *PostUpdate) SetSubjectTranslations(st schema.SubjectTranslations) *PostUpdate {
	pu.mutation.SetSubjectTranslations(st)
	return pu
}

// SetURL sets the url field.
func (pu *PostUpdate) SetURL(s string) *PostUpdate {
	pu.mutation.SetURL(s)
	return pu
}

// SetPublishedAt sets the published_at field.
func (pu *PostUpdate) SetPublishedAt(t time.Time) *PostUpdate {
	pu.mutation.SetPublishedAt(t)
	return pu
}

// SetDescription sets the description field.
func (pu *PostUpdate) SetDescription(s string) *PostUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetH1 sets the h1 field.
func (pu *PostUpdate) SetH1(s string) *PostUpdate {
	pu.mutation.SetH1(s)
	return pu
}

// SetContent sets the content field.
func (pu *PostUpdate) SetContent(s string) *PostUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetCreatedAt sets the created_at field.
func (pu *PostUpdate) SetCreatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pu *PostUpdate) SetNillableCreatedAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the updated_at field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUpdatedBy sets the updated_by field.
func (pu *PostUpdate) SetUpdatedBy(i int) *PostUpdate {
	pu.mutation.ResetUpdatedBy()
	pu.mutation.SetUpdatedBy(i)
	return pu
}

// AddUpdatedBy adds i to updated_by.
func (pu *PostUpdate) AddUpdatedBy(i int) *PostUpdate {
	pu.mutation.AddUpdatedBy(i)
	return pu
}

// SetSourceID sets the source edge to Source by id.
func (pu *PostUpdate) SetSourceID(id int) *PostUpdate {
	pu.mutation.SetSourceID(id)
	return pu
}

// SetNillableSourceID sets the source edge to Source by id if the given value is not nil.
func (pu *PostUpdate) SetNillableSourceID(id *int) *PostUpdate {
	if id != nil {
		pu = pu.SetSourceID(*id)
	}
	return pu
}

// SetSource sets the source edge to Source.
func (pu *PostUpdate) SetSource(s *Source) *PostUpdate {
	return pu.SetSourceID(s.ID)
}

// ClearSource clears the source edge to Source.
func (pu *PostUpdate) ClearSource() *PostUpdate {
	pu.mutation.ClearSource()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldTitle,
		})
	}
	if value, ok := pu.mutation.TitleTranslations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: post.FieldTitleTranslations,
		})
	}
	if value, ok := pu.mutation.Subject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldSubject,
		})
	}
	if pu.mutation.SubjectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: post.FieldSubject,
		})
	}
	if value, ok := pu.mutation.SubjectTranslations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: post.FieldSubjectTranslations,
		})
	}
	if value, ok := pu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldURL,
		})
	}
	if value, ok := pu.mutation.PublishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldPublishedAt,
		})
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldDescription,
		})
	}
	if value, ok := pu.mutation.H1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldH1,
		})
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldContent,
		})
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: post.FieldUpdatedBy,
		})
	}
	if value, ok := pu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: post.FieldUpdatedBy,
		})
	}
	if pu.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.SourceTable,
			Columns: []string{post.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.SourceTable,
			Columns: []string{post.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// SetTitle sets the title field.
func (puo *PostUpdateOne) SetTitle(s string) *PostUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetTitleTranslations sets the title_translations field.
func (puo *PostUpdateOne) SetTitleTranslations(st schema.TitleTranslations) *PostUpdateOne {
	puo.mutation.SetTitleTranslations(st)
	return puo
}

// SetSubject sets the subject field.
func (puo *PostUpdateOne) SetSubject(s string) *PostUpdateOne {
	puo.mutation.SetSubject(s)
	return puo
}

// SetNillableSubject sets the subject field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableSubject(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetSubject(*s)
	}
	return puo
}

// ClearSubject clears the value of subject.
func (puo *PostUpdateOne) ClearSubject() *PostUpdateOne {
	puo.mutation.ClearSubject()
	return puo
}

// SetSubjectTranslations sets the subject_translations field.
func (puo *PostUpdateOne) SetSubjectTranslations(st schema.SubjectTranslations) *PostUpdateOne {
	puo.mutation.SetSubjectTranslations(st)
	return puo
}

// SetURL sets the url field.
func (puo *PostUpdateOne) SetURL(s string) *PostUpdateOne {
	puo.mutation.SetURL(s)
	return puo
}

// SetPublishedAt sets the published_at field.
func (puo *PostUpdateOne) SetPublishedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetPublishedAt(t)
	return puo
}

// SetDescription sets the description field.
func (puo *PostUpdateOne) SetDescription(s string) *PostUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetH1 sets the h1 field.
func (puo *PostUpdateOne) SetH1(s string) *PostUpdateOne {
	puo.mutation.SetH1(s)
	return puo
}

// SetContent sets the content field.
func (puo *PostUpdateOne) SetContent(s string) *PostUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetCreatedAt sets the created_at field.
func (puo *PostUpdateOne) SetCreatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCreatedAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the updated_at field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUpdatedBy sets the updated_by field.
func (puo *PostUpdateOne) SetUpdatedBy(i int) *PostUpdateOne {
	puo.mutation.ResetUpdatedBy()
	puo.mutation.SetUpdatedBy(i)
	return puo
}

// AddUpdatedBy adds i to updated_by.
func (puo *PostUpdateOne) AddUpdatedBy(i int) *PostUpdateOne {
	puo.mutation.AddUpdatedBy(i)
	return puo
}

// SetSourceID sets the source edge to Source by id.
func (puo *PostUpdateOne) SetSourceID(id int) *PostUpdateOne {
	puo.mutation.SetSourceID(id)
	return puo
}

// SetNillableSourceID sets the source edge to Source by id if the given value is not nil.
func (puo *PostUpdateOne) SetNillableSourceID(id *int) *PostUpdateOne {
	if id != nil {
		puo = puo.SetSourceID(*id)
	}
	return puo
}

// SetSource sets the source edge to Source.
func (puo *PostUpdateOne) SetSource(s *Source) *PostUpdateOne {
	return puo.SetSourceID(s.ID)
}

// ClearSource clears the source edge to Source.
func (puo *PostUpdateOne) ClearSource() *PostUpdateOne {
	puo.mutation.ClearSource()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}

	var (
		err  error
		node *Post
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	po, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return po
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (po *Post, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Post.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldTitle,
		})
	}
	if value, ok := puo.mutation.TitleTranslations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: post.FieldTitleTranslations,
		})
	}
	if value, ok := puo.mutation.Subject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldSubject,
		})
	}
	if puo.mutation.SubjectCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: post.FieldSubject,
		})
	}
	if value, ok := puo.mutation.SubjectTranslations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: post.FieldSubjectTranslations,
		})
	}
	if value, ok := puo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldURL,
		})
	}
	if value, ok := puo.mutation.PublishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldPublishedAt,
		})
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldDescription,
		})
	}
	if value, ok := puo.mutation.H1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldH1,
		})
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldContent,
		})
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: post.FieldUpdatedBy,
		})
	}
	if value, ok := puo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: post.FieldUpdatedBy,
		})
	}
	if puo.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.SourceTable,
			Columns: []string{post.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.SourceTable,
			Columns: []string{post.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	po = &Post{config: puo.config}
	_spec.Assign = po.assignValues
	_spec.ScanValues = po.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return po, nil
}
