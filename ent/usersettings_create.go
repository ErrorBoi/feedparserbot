// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/ErrorBoi/feedparserbot/ent/user"
	"github.com/ErrorBoi/feedparserbot/ent/usersettings"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserSettingsCreate is the builder for creating a UserSettings entity.
type UserSettingsCreate struct {
	config
	mutation *UserSettingsMutation
	hooks    []Hook
}

// SetUrgentWords sets the urgent_words field.
func (usc *UserSettingsCreate) SetUrgentWords(s []string) *UserSettingsCreate {
	usc.mutation.SetUrgentWords(s)
	return usc
}

// SetBannedWords sets the banned_words field.
func (usc *UserSettingsCreate) SetBannedWords(s []string) *UserSettingsCreate {
	usc.mutation.SetBannedWords(s)
	return usc
}

// SetLanguage sets the language field.
func (usc *UserSettingsCreate) SetLanguage(u usersettings.Language) *UserSettingsCreate {
	usc.mutation.SetLanguage(u)
	return usc
}

// SetNillableLanguage sets the language field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableLanguage(u *usersettings.Language) *UserSettingsCreate {
	if u != nil {
		usc.SetLanguage(*u)
	}
	return usc
}

// SetSendingFrequency sets the sending_frequency field.
func (usc *UserSettingsCreate) SetSendingFrequency(uf usersettings.SendingFrequency) *UserSettingsCreate {
	usc.mutation.SetSendingFrequency(uf)
	return usc
}

// SetNillableSendingFrequency sets the sending_frequency field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableSendingFrequency(uf *usersettings.SendingFrequency) *UserSettingsCreate {
	if uf != nil {
		usc.SetSendingFrequency(*uf)
	}
	return usc
}

// SetLastSending sets the last_sending field.
func (usc *UserSettingsCreate) SetLastSending(t time.Time) *UserSettingsCreate {
	usc.mutation.SetLastSending(t)
	return usc
}

// SetNillableLastSending sets the last_sending field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableLastSending(t *time.Time) *UserSettingsCreate {
	if t != nil {
		usc.SetLastSending(*t)
	}
	return usc
}

// SetUserID sets the user edge to User by id.
func (usc *UserSettingsCreate) SetUserID(id int) *UserSettingsCreate {
	usc.mutation.SetUserID(id)
	return usc
}

// SetUser sets the user edge to User.
func (usc *UserSettingsCreate) SetUser(u *User) *UserSettingsCreate {
	return usc.SetUserID(u.ID)
}

// Save creates the UserSettings in the database.
func (usc *UserSettingsCreate) Save(ctx context.Context) (*UserSettings, error) {
	if _, ok := usc.mutation.Language(); !ok {
		v := usersettings.DefaultLanguage
		usc.mutation.SetLanguage(v)
	}
	if v, ok := usc.mutation.Language(); ok {
		if err := usersettings.LanguageValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"language\": %v", err)
		}
	}
	if _, ok := usc.mutation.SendingFrequency(); !ok {
		v := usersettings.DefaultSendingFrequency
		usc.mutation.SetSendingFrequency(v)
	}
	if v, ok := usc.mutation.SendingFrequency(); ok {
		if err := usersettings.SendingFrequencyValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"sending_frequency\": %v", err)
		}
	}
	if _, ok := usc.mutation.LastSending(); !ok {
		v := usersettings.DefaultLastSending()
		usc.mutation.SetLastSending(v)
	}
	if _, ok := usc.mutation.UserID(); !ok {
		return nil, errors.New("ent: missing required edge \"user\"")
	}
	var (
		err  error
		node *UserSettings
	)
	if len(usc.hooks) == 0 {
		node, err = usc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserSettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			usc.mutation = mutation
			node, err = usc.sqlSave(ctx)
			return node, err
		})
		for i := len(usc.hooks) - 1; i >= 0; i-- {
			mut = usc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, usc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSettingsCreate) SaveX(ctx context.Context) *UserSettings {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (usc *UserSettingsCreate) sqlSave(ctx context.Context) (*UserSettings, error) {
	var (
		us    = &UserSettings{config: usc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usersettings.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usersettings.FieldID,
			},
		}
	)
	if value, ok := usc.mutation.UrgentWords(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: usersettings.FieldUrgentWords,
		})
		us.UrgentWords = value
	}
	if value, ok := usc.mutation.BannedWords(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: usersettings.FieldBannedWords,
		})
		us.BannedWords = value
	}
	if value, ok := usc.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: usersettings.FieldLanguage,
		})
		us.Language = value
	}
	if value, ok := usc.mutation.SendingFrequency(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: usersettings.FieldSendingFrequency,
		})
		us.SendingFrequency = value
	}
	if value, ok := usc.mutation.LastSending(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usersettings.FieldLastSending,
		})
		us.LastSending = value
	}
	if nodes := usc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersettings.UserTable,
			Columns: []string{usersettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	us.ID = int(id)
	return us, nil
}
