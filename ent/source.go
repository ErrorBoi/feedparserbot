// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/ErrorBoi/feedparserbot/ent/source"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Source is the model entity for the Source schema.
type Source struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Language holds the value of the "language" field.
	Language source.Language `json:"language,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SourceQuery when eager-loading is set.
	Edges           SourceEdges `json:"edges"`
	source_children *int
}

// SourceEdges holds the relations/edges for other nodes in the graph.
type SourceEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Source
	// Children holds the value of the children edge.
	Children []*Source
	// Posts holds the value of the posts edge.
	Posts []*Post
	// Users holds the value of the users edge.
	Users []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SourceEdges) ParentOrErr() (*Source, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: source.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e SourceEdges) ChildrenOrErr() ([]*Source, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e SourceEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[2] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e SourceEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Source) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // url
		&sql.NullString{}, // title
		&sql.NullString{}, // language
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Source) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // source_children
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Source fields.
func (s *Source) assignValues(values ...interface{}) error {
	if m, n := len(values), len(source.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field url", values[0])
	} else if value.Valid {
		s.URL = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[1])
	} else if value.Valid {
		s.Title = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field language", values[2])
	} else if value.Valid {
		s.Language = source.Language(value.String)
	}
	values = values[3:]
	if len(values) == len(source.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field source_children", value)
		} else if value.Valid {
			s.source_children = new(int)
			*s.source_children = int(value.Int64)
		}
	}
	return nil
}

// QueryParent queries the parent edge of the Source.
func (s *Source) QueryParent() *SourceQuery {
	return (&SourceClient{config: s.config}).QueryParent(s)
}

// QueryChildren queries the children edge of the Source.
func (s *Source) QueryChildren() *SourceQuery {
	return (&SourceClient{config: s.config}).QueryChildren(s)
}

// QueryPosts queries the posts edge of the Source.
func (s *Source) QueryPosts() *PostQuery {
	return (&SourceClient{config: s.config}).QueryPosts(s)
}

// QueryUsers queries the users edge of the Source.
func (s *Source) QueryUsers() *UserQuery {
	return (&SourceClient{config: s.config}).QueryUsers(s)
}

// Update returns a builder for updating this Source.
// Note that, you need to call Source.Unwrap() before calling this method, if this Source
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Source) Update() *SourceUpdateOne {
	return (&SourceClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Source) Unwrap() *Source {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Source is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Source) String() string {
	var builder strings.Builder
	builder.WriteString("Source(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", url=")
	builder.WriteString(s.URL)
	builder.WriteString(", title=")
	builder.WriteString(s.Title)
	builder.WriteString(", language=")
	builder.WriteString(fmt.Sprintf("%v", s.Language))
	builder.WriteByte(')')
	return builder.String()
}

// Sources is a parsable slice of Source.
type Sources []*Source

func (s Sources) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
