// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/ErrorBoi/feedparserbot/ent/globalsettings"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// GlobalsettingsCreate is the builder for creating a Globalsettings entity.
type GlobalsettingsCreate struct {
	config
	mutation *GlobalsettingsMutation
	hooks    []Hook
}

// SetClickbaitWords sets the clickbait_words field.
func (gc *GlobalsettingsCreate) SetClickbaitWords(s []string) *GlobalsettingsCreate {
	gc.mutation.SetClickbaitWords(s)
	return gc
}

// Save creates the Globalsettings in the database.
func (gc *GlobalsettingsCreate) Save(ctx context.Context) (*Globalsettings, error) {
	var (
		err  error
		node *Globalsettings
	)
	if len(gc.hooks) == 0 {
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GlobalsettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gc.mutation = mutation
			node, err = gc.sqlSave(ctx)
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			mut = gc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GlobalsettingsCreate) SaveX(ctx context.Context) *Globalsettings {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gc *GlobalsettingsCreate) sqlSave(ctx context.Context) (*Globalsettings, error) {
	var (
		gl    = &Globalsettings{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: globalsettings.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: globalsettings.FieldID,
			},
		}
	)
	if value, ok := gc.mutation.ClickbaitWords(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: globalsettings.FieldClickbaitWords,
		})
		gl.ClickbaitWords = value
	}
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	gl.ID = int(id)
	return gl, nil
}
