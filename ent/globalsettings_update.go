// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/ErrorBoi/feedparserbot/ent/globalsettings"
	"github.com/ErrorBoi/feedparserbot/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// GlobalsettingsUpdate is the builder for updating Globalsettings entities.
type GlobalsettingsUpdate struct {
	config
	hooks      []Hook
	mutation   *GlobalsettingsMutation
	predicates []predicate.Globalsettings
}

// Where adds a new predicate for the builder.
func (gu *GlobalsettingsUpdate) Where(ps ...predicate.Globalsettings) *GlobalsettingsUpdate {
	gu.predicates = append(gu.predicates, ps...)
	return gu
}

// SetClickbaitWords sets the clickbait_words field.
func (gu *GlobalsettingsUpdate) SetClickbaitWords(s []string) *GlobalsettingsUpdate {
	gu.mutation.SetClickbaitWords(s)
	return gu
}

// ClearClickbaitWords clears the value of clickbait_words.
func (gu *GlobalsettingsUpdate) ClearClickbaitWords() *GlobalsettingsUpdate {
	gu.mutation.ClearClickbaitWords()
	return gu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (gu *GlobalsettingsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GlobalsettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GlobalsettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GlobalsettingsUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GlobalsettingsUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GlobalsettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   globalsettings.Table,
			Columns: globalsettings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: globalsettings.FieldID,
			},
		},
	}
	if ps := gu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.ClickbaitWords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: globalsettings.FieldClickbaitWords,
		})
	}
	if gu.mutation.ClickbaitWordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: globalsettings.FieldClickbaitWords,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{globalsettings.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GlobalsettingsUpdateOne is the builder for updating a single Globalsettings entity.
type GlobalsettingsUpdateOne struct {
	config
	hooks    []Hook
	mutation *GlobalsettingsMutation
}

// SetClickbaitWords sets the clickbait_words field.
func (guo *GlobalsettingsUpdateOne) SetClickbaitWords(s []string) *GlobalsettingsUpdateOne {
	guo.mutation.SetClickbaitWords(s)
	return guo
}

// ClearClickbaitWords clears the value of clickbait_words.
func (guo *GlobalsettingsUpdateOne) ClearClickbaitWords() *GlobalsettingsUpdateOne {
	guo.mutation.ClearClickbaitWords()
	return guo
}

// Save executes the query and returns the updated entity.
func (guo *GlobalsettingsUpdateOne) Save(ctx context.Context) (*Globalsettings, error) {
	var (
		err  error
		node *Globalsettings
	)
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GlobalsettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GlobalsettingsUpdateOne) SaveX(ctx context.Context) *Globalsettings {
	gl, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return gl
}

// Exec executes the query on the entity.
func (guo *GlobalsettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GlobalsettingsUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GlobalsettingsUpdateOne) sqlSave(ctx context.Context) (gl *Globalsettings, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   globalsettings.Table,
			Columns: globalsettings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: globalsettings.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Globalsettings.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := guo.mutation.ClickbaitWords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: globalsettings.FieldClickbaitWords,
		})
	}
	if guo.mutation.ClickbaitWordsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: globalsettings.FieldClickbaitWords,
		})
	}
	gl = &Globalsettings{config: guo.config}
	_spec.Assign = gl.assignValues
	_spec.ScanValues = gl.scanValues()
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{globalsettings.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return gl, nil
}
