// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebookincubator/ent/dialect/sql/schema"
	"github.com/facebookincubator/ent/schema/field"
)

var (
	// GlobalsettingsColumns holds the columns for the "globalsettings" table.
	GlobalsettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "clickbait_words", Type: field.TypeJSON, Nullable: true},
	}
	// GlobalsettingsTable holds the schema information for the "globalsettings" table.
	GlobalsettingsTable = &schema.Table{
		Name:        "globalsettings",
		Columns:     GlobalsettingsColumns,
		PrimaryKey:  []*schema.Column{GlobalsettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "title_translations", Type: field.TypeJSON},
		{Name: "subject", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "subject_translations", Type: field.TypeJSON, Nullable: true},
		{Name: "url", Type: field.TypeString, Unique: true},
		{Name: "published_at", Type: field.TypeTime},
		{Name: "description", Type: field.TypeString},
		{Name: "h1", Type: field.TypeString},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeInt, Nullable: true},
		{Name: "source_posts", Type: field.TypeInt, Nullable: true},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "posts_sources_posts",
				Columns: []*schema.Column{PostsColumns[13]},

				RefColumns: []*schema.Column{SourcesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SourcesColumns holds the columns for the "sources" table.
	SourcesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "url", Type: field.TypeString, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "language", Type: field.TypeEnum, Enums: []string{"ru", "en"}, Default: "ru"},
		{Name: "source_children", Type: field.TypeInt, Nullable: true},
	}
	// SourcesTable holds the schema information for the "sources" table.
	SourcesTable = &schema.Table{
		Name:       "sources",
		Columns:    SourcesColumns,
		PrimaryKey: []*schema.Column{SourcesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "sources_sources_children",
				Columns: []*schema.Column{SourcesColumns[4]},

				RefColumns: []*schema.Column{SourcesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "tg_id", Type: field.TypeInt, Unique: true},
		{Name: "payment_info", Type: field.TypeString, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "editor", "admin"}, Default: "user"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// UserSettingsColumns holds the columns for the "user_settings" table.
	UserSettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "urgent_words", Type: field.TypeJSON, Nullable: true},
		{Name: "banned_words", Type: field.TypeJSON, Nullable: true},
		{Name: "language", Type: field.TypeEnum, Enums: []string{"ru", "en"}, Default: "ru"},
		{Name: "sending_frequency", Type: field.TypeEnum, Enums: []string{"instant", "1h", "4h", "am", "pm", "mon", "tue", "wed", "thu", "fri", "sat", "sun"}, Default: "instant"},
		{Name: "last_sending", Type: field.TypeTime},
		{Name: "user_settings", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UserSettingsTable holds the schema information for the "user_settings" table.
	UserSettingsTable = &schema.Table{
		Name:       "user_settings",
		Columns:    UserSettingsColumns,
		PrimaryKey: []*schema.Column{UserSettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "user_settings_users_settings",
				Columns: []*schema.Column{UserSettingsColumns[6]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserSourcesColumns holds the columns for the "user_sources" table.
	UserSourcesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "source_id", Type: field.TypeInt},
	}
	// UserSourcesTable holds the schema information for the "user_sources" table.
	UserSourcesTable = &schema.Table{
		Name:       "user_sources",
		Columns:    UserSourcesColumns,
		PrimaryKey: []*schema.Column{UserSourcesColumns[0], UserSourcesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "user_sources_user_id",
				Columns: []*schema.Column{UserSourcesColumns[0]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "user_sources_source_id",
				Columns: []*schema.Column{UserSourcesColumns[1]},

				RefColumns: []*schema.Column{SourcesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		GlobalsettingsTable,
		PostsTable,
		SourcesTable,
		UsersTable,
		UserSettingsTable,
		UserSourcesTable,
	}
)

func init() {
	PostsTable.ForeignKeys[0].RefTable = SourcesTable
	SourcesTable.ForeignKeys[0].RefTable = SourcesTable
	UserSettingsTable.ForeignKeys[0].RefTable = UsersTable
	UserSourcesTable.ForeignKeys[0].RefTable = UsersTable
	UserSourcesTable.ForeignKeys[1].RefTable = SourcesTable
}
