// Code generated by entc, DO NOT EDIT.

package usersettings

import (
	"fmt"
)

const (
	// Label holds the string label denoting the usersettings type in the database.
	Label = "user_settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID               = "id"                // FieldUrgentWords holds the string denoting the urgent_words vertex property in the database.
	FieldUrgentWords      = "urgent_words"      // FieldBannedWords holds the string denoting the banned_words vertex property in the database.
	FieldBannedWords      = "banned_words"      // FieldLanguage holds the string denoting the language vertex property in the database.
	FieldLanguage         = "language"          // FieldSendingFrequency holds the string denoting the sending_frequency vertex property in the database.
	FieldSendingFrequency = "sending_frequency" // FieldLastSending holds the string denoting the last_sending vertex property in the database.
	FieldLastSending      = "last_sending"

	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"

	// Table holds the table name of the usersettings in the database.
	Table = "user_settings"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "user_settings"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_settings"
)

// Columns holds all SQL columns for usersettings fields.
var Columns = []string{
	FieldID,
	FieldUrgentWords,
	FieldBannedWords,
	FieldLanguage,
	FieldSendingFrequency,
	FieldLastSending,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the UserSettings type.
var ForeignKeys = []string{
	"user_settings",
}

var ()

// Language defines the type for the language enum field.
type Language string

// LanguageRu is the default Language.
const DefaultLanguage = LanguageRu

// Language values.
const (
	LanguageRu Language = "ru"
	LanguageEn Language = "en"
)

func (s Language) String() string {
	return string(s)
}

// LanguageValidator is a validator for the "l" field enum values. It is called by the builders before save.
func LanguageValidator(l Language) error {
	switch l {
	case LanguageRu, LanguageEn:
		return nil
	default:
		return fmt.Errorf("usersettings: invalid enum value for language field: %q", l)
	}
}

// SendingFrequency defines the type for the sending_frequency enum field.
type SendingFrequency string

// SendingFrequencyInstant is the default SendingFrequency.
const DefaultSendingFrequency = SendingFrequencyInstant

// SendingFrequency values.
const (
	SendingFrequencyInstant SendingFrequency = "instant"
	SendingFrequency1h      SendingFrequency = "1h"
	SendingFrequency4h      SendingFrequency = "4h"
	SendingFrequencyAm      SendingFrequency = "am"
	SendingFrequencyPm      SendingFrequency = "pm"
	SendingFrequencyMon     SendingFrequency = "mon"
	SendingFrequencyTue     SendingFrequency = "tue"
	SendingFrequencyWed     SendingFrequency = "wed"
	SendingFrequencyThu     SendingFrequency = "thu"
	SendingFrequencyFri     SendingFrequency = "fri"
	SendingFrequencySat     SendingFrequency = "sat"
	SendingFrequencySun     SendingFrequency = "sun"
)

func (s SendingFrequency) String() string {
	return string(s)
}

// SendingFrequencyValidator is a validator for the "sf" field enum values. It is called by the builders before save.
func SendingFrequencyValidator(sf SendingFrequency) error {
	switch sf {
	case SendingFrequencyInstant, SendingFrequency1h, SendingFrequency4h, SendingFrequencyAm, SendingFrequencyPm, SendingFrequencyMon, SendingFrequencyTue, SendingFrequencyWed, SendingFrequencyThu, SendingFrequencyFri, SendingFrequencySat, SendingFrequencySun:
		return nil
	default:
		return fmt.Errorf("usersettings: invalid enum value for sending_frequency field: %q", sf)
	}
}
