// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/ErrorBoi/feedparserbot/ent/post"
	"github.com/ErrorBoi/feedparserbot/ent/predicate"
	"github.com/ErrorBoi/feedparserbot/ent/source"
	"github.com/ErrorBoi/feedparserbot/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SourceUpdate is the builder for updating Source entities.
type SourceUpdate struct {
	config
	hooks      []Hook
	mutation   *SourceMutation
	predicates []predicate.Source
}

// Where adds a new predicate for the builder.
func (su *SourceUpdate) Where(ps ...predicate.Source) *SourceUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetURL sets the url field.
func (su *SourceUpdate) SetURL(s string) *SourceUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetTitle sets the title field.
func (su *SourceUpdate) SetTitle(s string) *SourceUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetLanguage sets the language field.
func (su *SourceUpdate) SetLanguage(s source.Language) *SourceUpdate {
	su.mutation.SetLanguage(s)
	return su
}

// SetNillableLanguage sets the language field if the given value is not nil.
func (su *SourceUpdate) SetNillableLanguage(s *source.Language) *SourceUpdate {
	if s != nil {
		su.SetLanguage(*s)
	}
	return su
}

// SetParentID sets the parent edge to Source by id.
func (su *SourceUpdate) SetParentID(id int) *SourceUpdate {
	su.mutation.SetParentID(id)
	return su
}

// SetNillableParentID sets the parent edge to Source by id if the given value is not nil.
func (su *SourceUpdate) SetNillableParentID(id *int) *SourceUpdate {
	if id != nil {
		su = su.SetParentID(*id)
	}
	return su
}

// SetParent sets the parent edge to Source.
func (su *SourceUpdate) SetParent(s *Source) *SourceUpdate {
	return su.SetParentID(s.ID)
}

// AddChildIDs adds the children edge to Source by ids.
func (su *SourceUpdate) AddChildIDs(ids ...int) *SourceUpdate {
	su.mutation.AddChildIDs(ids...)
	return su
}

// AddChildren adds the children edges to Source.
func (su *SourceUpdate) AddChildren(s ...*Source) *SourceUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddChildIDs(ids...)
}

// AddPostIDs adds the posts edge to Post by ids.
func (su *SourceUpdate) AddPostIDs(ids ...int) *SourceUpdate {
	su.mutation.AddPostIDs(ids...)
	return su
}

// AddPosts adds the posts edges to Post.
func (su *SourceUpdate) AddPosts(p ...*Post) *SourceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPostIDs(ids...)
}

// AddUserIDs adds the users edge to User by ids.
func (su *SourceUpdate) AddUserIDs(ids ...int) *SourceUpdate {
	su.mutation.AddUserIDs(ids...)
	return su
}

// AddUsers adds the users edges to User.
func (su *SourceUpdate) AddUsers(u ...*User) *SourceUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddUserIDs(ids...)
}

// ClearParent clears the parent edge to Source.
func (su *SourceUpdate) ClearParent() *SourceUpdate {
	su.mutation.ClearParent()
	return su
}

// RemoveChildIDs removes the children edge to Source by ids.
func (su *SourceUpdate) RemoveChildIDs(ids ...int) *SourceUpdate {
	su.mutation.RemoveChildIDs(ids...)
	return su
}

// RemoveChildren removes children edges to Source.
func (su *SourceUpdate) RemoveChildren(s ...*Source) *SourceUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveChildIDs(ids...)
}

// RemovePostIDs removes the posts edge to Post by ids.
func (su *SourceUpdate) RemovePostIDs(ids ...int) *SourceUpdate {
	su.mutation.RemovePostIDs(ids...)
	return su
}

// RemovePosts removes posts edges to Post.
func (su *SourceUpdate) RemovePosts(p ...*Post) *SourceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePostIDs(ids...)
}

// RemoveUserIDs removes the users edge to User by ids.
func (su *SourceUpdate) RemoveUserIDs(ids ...int) *SourceUpdate {
	su.mutation.RemoveUserIDs(ids...)
	return su
}

// RemoveUsers removes users edges to User.
func (su *SourceUpdate) RemoveUsers(u ...*User) *SourceUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SourceUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.Language(); ok {
		if err := source.LanguageValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"language\": %v", err)
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SourceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SourceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SourceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   source.Table,
			Columns: source.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldURL,
		})
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldTitle,
		})
	}
	if value, ok := su.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: source.FieldLanguage,
		})
	}
	if su.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.ParentTable,
			Columns: []string{source.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.ParentTable,
			Columns: []string{source.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.ChildrenTable,
			Columns: []string{source.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.ChildrenTable,
			Columns: []string{source.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.PostsTable,
			Columns: []string{source.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.PostsTable,
			Columns: []string{source.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   source.UsersTable,
			Columns: source.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   source.UsersTable,
			Columns: source.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{source.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SourceUpdateOne is the builder for updating a single Source entity.
type SourceUpdateOne struct {
	config
	hooks    []Hook
	mutation *SourceMutation
}

// SetURL sets the url field.
func (suo *SourceUpdateOne) SetURL(s string) *SourceUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetTitle sets the title field.
func (suo *SourceUpdateOne) SetTitle(s string) *SourceUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetLanguage sets the language field.
func (suo *SourceUpdateOne) SetLanguage(s source.Language) *SourceUpdateOne {
	suo.mutation.SetLanguage(s)
	return suo
}

// SetNillableLanguage sets the language field if the given value is not nil.
func (suo *SourceUpdateOne) SetNillableLanguage(s *source.Language) *SourceUpdateOne {
	if s != nil {
		suo.SetLanguage(*s)
	}
	return suo
}

// SetParentID sets the parent edge to Source by id.
func (suo *SourceUpdateOne) SetParentID(id int) *SourceUpdateOne {
	suo.mutation.SetParentID(id)
	return suo
}

// SetNillableParentID sets the parent edge to Source by id if the given value is not nil.
func (suo *SourceUpdateOne) SetNillableParentID(id *int) *SourceUpdateOne {
	if id != nil {
		suo = suo.SetParentID(*id)
	}
	return suo
}

// SetParent sets the parent edge to Source.
func (suo *SourceUpdateOne) SetParent(s *Source) *SourceUpdateOne {
	return suo.SetParentID(s.ID)
}

// AddChildIDs adds the children edge to Source by ids.
func (suo *SourceUpdateOne) AddChildIDs(ids ...int) *SourceUpdateOne {
	suo.mutation.AddChildIDs(ids...)
	return suo
}

// AddChildren adds the children edges to Source.
func (suo *SourceUpdateOne) AddChildren(s ...*Source) *SourceUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddChildIDs(ids...)
}

// AddPostIDs adds the posts edge to Post by ids.
func (suo *SourceUpdateOne) AddPostIDs(ids ...int) *SourceUpdateOne {
	suo.mutation.AddPostIDs(ids...)
	return suo
}

// AddPosts adds the posts edges to Post.
func (suo *SourceUpdateOne) AddPosts(p ...*Post) *SourceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPostIDs(ids...)
}

// AddUserIDs adds the users edge to User by ids.
func (suo *SourceUpdateOne) AddUserIDs(ids ...int) *SourceUpdateOne {
	suo.mutation.AddUserIDs(ids...)
	return suo
}

// AddUsers adds the users edges to User.
func (suo *SourceUpdateOne) AddUsers(u ...*User) *SourceUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddUserIDs(ids...)
}

// ClearParent clears the parent edge to Source.
func (suo *SourceUpdateOne) ClearParent() *SourceUpdateOne {
	suo.mutation.ClearParent()
	return suo
}

// RemoveChildIDs removes the children edge to Source by ids.
func (suo *SourceUpdateOne) RemoveChildIDs(ids ...int) *SourceUpdateOne {
	suo.mutation.RemoveChildIDs(ids...)
	return suo
}

// RemoveChildren removes children edges to Source.
func (suo *SourceUpdateOne) RemoveChildren(s ...*Source) *SourceUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveChildIDs(ids...)
}

// RemovePostIDs removes the posts edge to Post by ids.
func (suo *SourceUpdateOne) RemovePostIDs(ids ...int) *SourceUpdateOne {
	suo.mutation.RemovePostIDs(ids...)
	return suo
}

// RemovePosts removes posts edges to Post.
func (suo *SourceUpdateOne) RemovePosts(p ...*Post) *SourceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePostIDs(ids...)
}

// RemoveUserIDs removes the users edge to User by ids.
func (suo *SourceUpdateOne) RemoveUserIDs(ids ...int) *SourceUpdateOne {
	suo.mutation.RemoveUserIDs(ids...)
	return suo
}

// RemoveUsers removes users edges to User.
func (suo *SourceUpdateOne) RemoveUsers(u ...*User) *SourceUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveUserIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *SourceUpdateOne) Save(ctx context.Context) (*Source, error) {
	if v, ok := suo.mutation.Language(); ok {
		if err := source.LanguageValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"language\": %v", err)
		}
	}

	var (
		err  error
		node *Source
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SourceUpdateOne) SaveX(ctx context.Context) *Source {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SourceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SourceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SourceUpdateOne) sqlSave(ctx context.Context) (s *Source, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   source.Table,
			Columns: source.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Source.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldURL,
		})
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldTitle,
		})
	}
	if value, ok := suo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: source.FieldLanguage,
		})
	}
	if suo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.ParentTable,
			Columns: []string{source.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.ParentTable,
			Columns: []string{source.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.ChildrenTable,
			Columns: []string{source.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.ChildrenTable,
			Columns: []string{source.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.PostsTable,
			Columns: []string{source.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.PostsTable,
			Columns: []string{source.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   source.UsersTable,
			Columns: source.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   source.UsersTable,
			Columns: source.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Source{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{source.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
