// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/ErrorBoi/feedparserbot/ent/post"
	"github.com/ErrorBoi/feedparserbot/ent/source"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SourceCreate is the builder for creating a Source entity.
type SourceCreate struct {
	config
	mutation *SourceMutation
	hooks    []Hook
}

// SetURL sets the url field.
func (sc *SourceCreate) SetURL(s string) *SourceCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetTitle sets the title field.
func (sc *SourceCreate) SetTitle(s string) *SourceCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetLanguage sets the language field.
func (sc *SourceCreate) SetLanguage(s source.Language) *SourceCreate {
	sc.mutation.SetLanguage(s)
	return sc
}

// SetNillableLanguage sets the language field if the given value is not nil.
func (sc *SourceCreate) SetNillableLanguage(s *source.Language) *SourceCreate {
	if s != nil {
		sc.SetLanguage(*s)
	}
	return sc
}

// SetParentID sets the parent edge to Source by id.
func (sc *SourceCreate) SetParentID(id int) *SourceCreate {
	sc.mutation.SetParentID(id)
	return sc
}

// SetNillableParentID sets the parent edge to Source by id if the given value is not nil.
func (sc *SourceCreate) SetNillableParentID(id *int) *SourceCreate {
	if id != nil {
		sc = sc.SetParentID(*id)
	}
	return sc
}

// SetParent sets the parent edge to Source.
func (sc *SourceCreate) SetParent(s *Source) *SourceCreate {
	return sc.SetParentID(s.ID)
}

// AddChildIDs adds the children edge to Source by ids.
func (sc *SourceCreate) AddChildIDs(ids ...int) *SourceCreate {
	sc.mutation.AddChildIDs(ids...)
	return sc
}

// AddChildren adds the children edges to Source.
func (sc *SourceCreate) AddChildren(s ...*Source) *SourceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddChildIDs(ids...)
}

// AddPostIDs adds the posts edge to Post by ids.
func (sc *SourceCreate) AddPostIDs(ids ...int) *SourceCreate {
	sc.mutation.AddPostIDs(ids...)
	return sc
}

// AddPosts adds the posts edges to Post.
func (sc *SourceCreate) AddPosts(p ...*Post) *SourceCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddPostIDs(ids...)
}

// Save creates the Source in the database.
func (sc *SourceCreate) Save(ctx context.Context) (*Source, error) {
	if _, ok := sc.mutation.URL(); !ok {
		return nil, errors.New("ent: missing required field \"url\"")
	}
	if _, ok := sc.mutation.Title(); !ok {
		return nil, errors.New("ent: missing required field \"title\"")
	}
	if _, ok := sc.mutation.Language(); !ok {
		v := source.DefaultLanguage
		sc.mutation.SetLanguage(v)
	}
	if v, ok := sc.mutation.Language(); ok {
		if err := source.LanguageValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"language\": %v", err)
		}
	}
	var (
		err  error
		node *Source
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SourceCreate) SaveX(ctx context.Context) *Source {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SourceCreate) sqlSave(ctx context.Context) (*Source, error) {
	var (
		s     = &Source{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: source.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldURL,
		})
		s.URL = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldTitle,
		})
		s.Title = value
	}
	if value, ok := sc.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: source.FieldLanguage,
		})
		s.Language = value
	}
	if nodes := sc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.ParentTable,
			Columns: []string{source.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.ChildrenTable,
			Columns: []string{source.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.PostsTable,
			Columns: []string{source.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}
