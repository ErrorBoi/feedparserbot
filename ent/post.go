// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/ErrorBoi/feedparserbot/ent/post"
	"github.com/ErrorBoi/feedparserbot/ent/schema"
	"github.com/ErrorBoi/feedparserbot/ent/source"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// TitleTranslations holds the value of the "title_translations" field.
	TitleTranslations schema.TitleTranslations `json:"title_translations,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject *string `json:"subject,omitempty"`
	// SubjectTranslations holds the value of the "subject_translations" field.
	SubjectTranslations schema.SubjectTranslations `json:"subject_translations,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// H1 holds the value of the "h1" field.
	H1 string `json:"h1,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges        PostEdges `json:"edges"`
	source_posts *int
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// Source holds the value of the source edge.
	Source *Source
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) SourceOrErr() (*Source, error) {
	if e.loadedTypes[0] {
		if e.Source == nil {
			// The edge source was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: source.Label}
		}
		return e.Source, nil
	}
	return nil, &NotLoadedError{edge: "source"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // title
		&[]byte{},         // title_translations
		&sql.NullString{}, // subject
		&[]byte{},         // subject_translations
		&sql.NullString{}, // url
		&sql.NullTime{},   // published_at
		&sql.NullString{}, // description
		&sql.NullString{}, // h1
		&sql.NullString{}, // content
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // updated_by
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Post) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // source_posts
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(values ...interface{}) error {
	if m, n := len(values), len(post.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	po.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[0])
	} else if value.Valid {
		po.Title = value.String
	}

	if value, ok := values[1].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field title_translations", values[1])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &po.TitleTranslations); err != nil {
			return fmt.Errorf("unmarshal field title_translations: %v", err)
		}
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field subject", values[2])
	} else if value.Valid {
		po.Subject = new(string)
		*po.Subject = value.String
	}

	if value, ok := values[3].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field subject_translations", values[3])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &po.SubjectTranslations); err != nil {
			return fmt.Errorf("unmarshal field subject_translations: %v", err)
		}
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field url", values[4])
	} else if value.Valid {
		po.URL = value.String
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field published_at", values[5])
	} else if value.Valid {
		po.PublishedAt = value.Time
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[6])
	} else if value.Valid {
		po.Description = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field h1", values[7])
	} else if value.Valid {
		po.H1 = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field content", values[8])
	} else if value.Valid {
		po.Content = value.String
	}
	if value, ok := values[9].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[9])
	} else if value.Valid {
		po.CreatedAt = value.Time
	}
	if value, ok := values[10].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[10])
	} else if value.Valid {
		po.UpdatedAt = value.Time
	}
	if value, ok := values[11].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field updated_by", values[11])
	} else if value.Valid {
		po.UpdatedBy = int(value.Int64)
	}
	values = values[12:]
	if len(values) == len(post.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field source_posts", value)
		} else if value.Valid {
			po.source_posts = new(int)
			*po.source_posts = int(value.Int64)
		}
	}
	return nil
}

// QuerySource queries the source edge of the Post.
func (po *Post) QuerySource() *SourceQuery {
	return (&PostClient{config: po.config}).QuerySource(po)
}

// Update returns a builder for updating this Post.
// Note that, you need to call Post.Unwrap() before calling this method, if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return (&PostClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", title=")
	builder.WriteString(po.Title)
	builder.WriteString(", title_translations=")
	builder.WriteString(fmt.Sprintf("%v", po.TitleTranslations))
	if v := po.Subject; v != nil {
		builder.WriteString(", subject=")
		builder.WriteString(*v)
	}
	builder.WriteString(", subject_translations=")
	builder.WriteString(fmt.Sprintf("%v", po.SubjectTranslations))
	builder.WriteString(", url=")
	builder.WriteString(po.URL)
	builder.WriteString(", published_at=")
	builder.WriteString(po.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", description=")
	builder.WriteString(po.Description)
	builder.WriteString(", h1=")
	builder.WriteString(po.H1)
	builder.WriteString(", content=")
	builder.WriteString(po.Content)
	builder.WriteString(", created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", po.UpdatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// Posts is a parsable slice of Post.
type Posts []*Post

func (po Posts) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
