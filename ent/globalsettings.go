// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/ErrorBoi/feedparserbot/ent/globalsettings"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Globalsettings is the model entity for the Globalsettings schema.
type Globalsettings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ClickbaitWords holds the value of the "clickbait_words" field.
	ClickbaitWords []string `json:"clickbait_words,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Globalsettings) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&[]byte{},        // clickbait_words
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Globalsettings fields.
func (gl *Globalsettings) assignValues(values ...interface{}) error {
	if m, n := len(values), len(globalsettings.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	gl.ID = int(value.Int64)
	values = values[1:]

	if value, ok := values[0].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field clickbait_words", values[0])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &gl.ClickbaitWords); err != nil {
			return fmt.Errorf("unmarshal field clickbait_words: %v", err)
		}
	}
	return nil
}

// Update returns a builder for updating this Globalsettings.
// Note that, you need to call Globalsettings.Unwrap() before calling this method, if this Globalsettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (gl *Globalsettings) Update() *GlobalsettingsUpdateOne {
	return (&GlobalsettingsClient{config: gl.config}).UpdateOne(gl)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (gl *Globalsettings) Unwrap() *Globalsettings {
	tx, ok := gl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Globalsettings is not a transactional entity")
	}
	gl.config.driver = tx.drv
	return gl
}

// String implements the fmt.Stringer.
func (gl *Globalsettings) String() string {
	var builder strings.Builder
	builder.WriteString("Globalsettings(")
	builder.WriteString(fmt.Sprintf("id=%v", gl.ID))
	builder.WriteString(", clickbait_words=")
	builder.WriteString(fmt.Sprintf("%v", gl.ClickbaitWords))
	builder.WriteByte(')')
	return builder.String()
}

// GlobalsettingsSlice is a parsable slice of Globalsettings.
type GlobalsettingsSlice []*Globalsettings

func (gl GlobalsettingsSlice) config(cfg config) {
	for _i := range gl {
		gl[_i].config = cfg
	}
}
