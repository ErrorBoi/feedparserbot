// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/ErrorBoi/feedparserbot/ent/post"
	"github.com/ErrorBoi/feedparserbot/ent/schema"
	"github.com/ErrorBoi/feedparserbot/ent/source"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PostCreate is the builder for creating a Post entity.
type PostCreate struct {
	config
	mutation *PostMutation
	hooks    []Hook
}

// SetTitle sets the title field.
func (pc *PostCreate) SetTitle(s string) *PostCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetTitleTranslations sets the title_translations field.
func (pc *PostCreate) SetTitleTranslations(s schema.Translations) *PostCreate {
	pc.mutation.SetTitleTranslations(s)
	return pc
}

// SetSubject sets the subject field.
func (pc *PostCreate) SetSubject(s string) *PostCreate {
	pc.mutation.SetSubject(s)
	return pc
}

// SetNillableSubject sets the subject field if the given value is not nil.
func (pc *PostCreate) SetNillableSubject(s *string) *PostCreate {
	if s != nil {
		pc.SetSubject(*s)
	}
	return pc
}

// SetSubjectTranslations sets the subject_translations field.
func (pc *PostCreate) SetSubjectTranslations(s schema.Translations) *PostCreate {
	pc.mutation.SetSubjectTranslations(s)
	return pc
}

// SetNillableSubjectTranslations sets the subject_translations field if the given value is not nil.
func (pc *PostCreate) SetNillableSubjectTranslations(s *schema.Translations) *PostCreate {
	if s != nil {
		pc.SetSubjectTranslations(*s)
	}
	return pc
}

// SetURL sets the url field.
func (pc *PostCreate) SetURL(s string) *PostCreate {
	pc.mutation.SetURL(s)
	return pc
}

// SetPublishedAt sets the published_at field.
func (pc *PostCreate) SetPublishedAt(t time.Time) *PostCreate {
	pc.mutation.SetPublishedAt(t)
	return pc
}

// SetDescription sets the description field.
func (pc *PostCreate) SetDescription(s string) *PostCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetH1 sets the h1 field.
func (pc *PostCreate) SetH1(s string) *PostCreate {
	pc.mutation.SetH1(s)
	return pc
}

// SetContent sets the content field.
func (pc *PostCreate) SetContent(s string) *PostCreate {
	pc.mutation.SetContent(s)
	return pc
}

// SetCreatedAt sets the created_at field.
func (pc *PostCreate) SetCreatedAt(t time.Time) *PostCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pc *PostCreate) SetNillableCreatedAt(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the updated_at field.
func (pc *PostCreate) SetUpdatedAt(t time.Time) *PostCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pc *PostCreate) SetNillableUpdatedAt(t *time.Time) *PostCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetUpdatedBy sets the updated_by field.
func (pc *PostCreate) SetUpdatedBy(i int) *PostCreate {
	pc.mutation.SetUpdatedBy(i)
	return pc
}

// SetNillableUpdatedBy sets the updated_by field if the given value is not nil.
func (pc *PostCreate) SetNillableUpdatedBy(i *int) *PostCreate {
	if i != nil {
		pc.SetUpdatedBy(*i)
	}
	return pc
}

// SetSourceID sets the source edge to Source by id.
func (pc *PostCreate) SetSourceID(id int) *PostCreate {
	pc.mutation.SetSourceID(id)
	return pc
}

// SetNillableSourceID sets the source edge to Source by id if the given value is not nil.
func (pc *PostCreate) SetNillableSourceID(id *int) *PostCreate {
	if id != nil {
		pc = pc.SetSourceID(*id)
	}
	return pc
}

// SetSource sets the source edge to Source.
func (pc *PostCreate) SetSource(s *Source) *PostCreate {
	return pc.SetSourceID(s.ID)
}

// Save creates the Post in the database.
func (pc *PostCreate) Save(ctx context.Context) (*Post, error) {
	if _, ok := pc.mutation.Title(); !ok {
		return nil, errors.New("ent: missing required field \"title\"")
	}
	if _, ok := pc.mutation.TitleTranslations(); !ok {
		return nil, errors.New("ent: missing required field \"title_translations\"")
	}
	if _, ok := pc.mutation.URL(); !ok {
		return nil, errors.New("ent: missing required field \"url\"")
	}
	if _, ok := pc.mutation.PublishedAt(); !ok {
		return nil, errors.New("ent: missing required field \"published_at\"")
	}
	if _, ok := pc.mutation.Description(); !ok {
		return nil, errors.New("ent: missing required field \"description\"")
	}
	if _, ok := pc.mutation.H1(); !ok {
		return nil, errors.New("ent: missing required field \"h1\"")
	}
	if _, ok := pc.mutation.Content(); !ok {
		return nil, errors.New("ent: missing required field \"content\"")
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := post.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := post.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	var (
		err  error
		node *Post
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PostCreate) SaveX(ctx context.Context) *Post {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PostCreate) sqlSave(ctx context.Context) (*Post, error) {
	var (
		po    = &Post{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: post.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldTitle,
		})
		po.Title = value
	}
	if value, ok := pc.mutation.TitleTranslations(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: post.FieldTitleTranslations,
		})
		po.TitleTranslations = value
	}
	if value, ok := pc.mutation.Subject(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldSubject,
		})
		po.Subject = &value
	}
	if value, ok := pc.mutation.SubjectTranslations(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: post.FieldSubjectTranslations,
		})
		po.SubjectTranslations = value
	}
	if value, ok := pc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldURL,
		})
		po.URL = value
	}
	if value, ok := pc.mutation.PublishedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldPublishedAt,
		})
		po.PublishedAt = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldDescription,
		})
		po.Description = value
	}
	if value, ok := pc.mutation.H1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldH1,
		})
		po.H1 = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: post.FieldContent,
		})
		po.Content = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldCreatedAt,
		})
		po.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: post.FieldUpdatedAt,
		})
		po.UpdatedAt = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: post.FieldUpdatedBy,
		})
		po.UpdatedBy = &value
	}
	if nodes := pc.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.SourceTable,
			Columns: []string{post.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	po.ID = int(id)
	return po, nil
}
